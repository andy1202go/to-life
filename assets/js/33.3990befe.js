(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{438:function(n,a,t){"use strict";t.r(a);var e=t(0),r=Object(e.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("译者序\n前言\n致谢")]),n._v(" "),a("h1",{attrs:{id:"第1章-java程序设计概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第1章-java程序设计概述"}},[n._v("#")]),n._v(" 第1章 Java程序设计概述")]),n._v(" "),a("h2",{attrs:{id:"_1-1-java程序设计平台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java程序设计平台"}},[n._v("#")]),n._v(" 1.1 Java程序设计平台")]),n._v(" "),a("p",[n._v("1.2 Java“白皮书”的关键术语\n1.2.1 简单性\n1.2.2 面向对象\n1.2.3 网络技能\n1.2.4 健壮性\n1.2.5 安全性\n1.2.6 体系结构中立\n1.2.7 可移植性\n1.2.8 解释型\n1.2.9 高性能\n1.2.10 多线程\n1.2.11 动态性\n1.3 Java applet与Internet\n1.4 Java发展简史\n1.5 关于Java的常见误解\n第2章 Java程序设计环境\n2.1 安装Java开发工具箱\n2.1.1 下载JDK\n2.1.2 设置执行路径\n2.1.3 安装库源文件和文档\n2.1.4 安装本书中的示例\n2.1.5 导航Java目录\n2.2 选择开发环境\n2.3 使用命令行工具\n2.4 使用集成开发环境\n2.5 运行图形化应用程序\n2.6 建立并运行applet\n第3章 Java的基本程序设计结构\n3.1 一个简单的Java应用程序\n3.2 注释\n3.3 数据类型\n3.3.1 整型\n3.3.2 浮点类型\n3.3.3 char类型\n3.3.4 boolean类型\n3.4 变量\n3.4.1 变量初始化\n3.4.2 常量\n3.5 运算符\n3.5.1 自增运算符与自减运算符\n3.5.2 关系运算符与boolean运算符\n3.5.3 位运算符\n3.5.4 数学函数与常量\n3.5.5 数值类型之间的转换\n3.5.6 强制类型转换\n3.5.7 括号与运算符级别\n3.5.8 枚举类型\n3.6 字符串\n3.6.1 子串\n3.6.2 拼接\n3.6.3 不可变字符串\n3.6.4 检测字符串是否相等\n3.6.5 空串与Null串\n3.6.6 代码点与代码单元\n3.6.7 字符串API\n3.6.8 阅读联机API文档\n3.6.9 构建字符串\n3.7 输入输出\n3.7.1 读取输入\n3.7.2 格式化输出\n3.7.3 文件输入与输出\n3.8 控制流程\n3.8.1 块作用域\n3.8.2 条件语句\n3.8.3 循环\n3.8.4 确定循环\n3.8.5 多重选择：switch语句\n3.8.6 中断控制流程语句")]),n._v(" "),a("h3",{attrs:{id:"_3-9-大数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-大数值"}},[n._v("#")]),n._v(" 3.9 大数值")]),n._v(" "),a("p",[n._v("3.10 数组\n3.10.1 for each循环\n3.10.2 数组初始化以及匿名数组\n3.10.3 数组拷贝\n3.10.4 命令行参数\n3.10.5 数组排序\n3.10.6 多维数组\n3.10.7 不规则数组")]),n._v(" "),a("h1",{attrs:{id:"第4章-对象与类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第4章-对象与类"}},[n._v("#")]),n._v(" 第4章 对象与类")]),n._v(" "),a("h2",{attrs:{id:"_4-1-面向对象程序设计概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-面向对象程序设计概述"}},[n._v("#")]),n._v(" 4.1 面向对象程序设计概述")]),n._v(" "),a("p",[n._v("4.1.1 类")]),n._v(" "),a("h3",{attrs:{id:"_4-1-2-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-对象"}},[n._v("#")]),n._v(" 4.1.2 对象")]),n._v(" "),a("p",[n._v("对象的三个主要特性：行为、状态、标识。")]),n._v(" "),a("p",[n._v("4.1.3 识别类\n4.1.4　类之间的关系\n4.2 使用预定义类\n4.2.1 对象与对象变量\n4.2.2 Java类库中的Gregorian-Calendar类\n4.2.3 更改器方法与访问器方法\n4.3 用户自定义类\n4.3.1 Employee类\n4.3.2 多个源文件的使用\n4.3.3 剖析Employee类\n4.3.4 从构造器开始\n4.3.5 隐式参数与显式参数\n4.3.6 封装的优点\n4.3.7 基于类的访问权限\n4.3.8 私有方法\n4.3.9 final实例域\n4.4 静态域与静态方法\n4.4.1 静态域\n4.4.2 静态常量\n4.4.3 静态方法\n4.4.4 工厂方法\n4.4.5 main方法\n4.5 方法参数\n4.6 对象构造\n4.6.1 重载\n4.6.2 默认域初始化\n4.6.3 无参数的构造器\n4.6.4 显式域初始化\n4.6.5 参数名\n4.6.6 调用另一个构造器\n4.6.7 初始化块\n4.6.8 对象析构与finalize方法\n4.7 包\n4.7.1 类的导入\n4.7.2 静态导入\n4.7.3 将类放入包中\n4.7.4 包作用域\n4.8 类路径\n4.9 文档注释\n4.9.1 注释的插入\n4.9.2 类注释\n4.9.3 方法注释\n4.9.4 域注释\n4.9.5 通用注释\n4.9.6 包与概述注释\n4.9.7 注释的抽取\n4.10 类设计技巧\n第5章 继承\n5.1 类、超类和子类\n5.1.1 继承层次\n5.1.2 多态\n5.1.3 动态绑定\n5.1.4 阻止继承：final类和方法\n5.1.5 强制类型转换\n5.1.6 抽象类\n5.1.7 受保护访问\n5.2 Object：所有类的超类\n5.2.1 equals方法\n5.2.2 相等测试与继承\n5.2.3 hashCode方法\n5.2.4 toString方法\n5.3 泛型数组列表\n5.3.1 访问数组列表元素\n5.3.2 类型化与原始数组列表的兼容性\n5.4 对象包装器与自动装箱\n5.5 参数数量可变的方法\n5.6 枚举类\n5.7 反射\n5.7.1 Class类\n5.7.2 捕获异常\n5.7.3 利用反射分析类的能力\n5.7.4 在运行时使用反射分析对象\n5.7.5 使用反射编写泛型数组代码\n5.7.6 调用任意方法\n5.8 继承设计的技巧\n第6章 接口与内部类\n6.1 接口\n6.1.1 接口的特性\n6.1.2 接口与抽象类\n6.2 对象克隆\n6.3 接口与回调\n6.4 内部类\n6.4.1 使用内部类访问对象状态\n6.4.2 内部类的特殊语法规则\n6.4.3 内部类是否有用、必要和安全\n6.4.4 局部内部类\n6.4.5 由外部方法访问final变量\n6.4.6 匿名内部类\n6.4.7 静态内部类\n6.5 代理\n第7章 图形程序设计\n7.1 Swing概述\n7.2 创建框架\n7.3 框架定位\n7.3.1 框架属性\n7.3.2 确定合适的框架大小\n7.4 在组件中显示信息\n7.5 处理2D图形\n7.6 使用颜色\n7.7 文本使用特殊字体\n7.8 显示图像\n第8章 事件处理\n8.1 事件处理基础\n8.1.1 实例：处理按钮点击事件\n8.1.2 建议使用内部类\n8.1.3 创建包含一个方法调用的监听器\n8.1.4 实例：改变观感\n8.1.5 适配器类\n8.2 动作\n8.3 鼠标事件\n8.4 AWT事件继承层次\n第9章 Swing用户界面组件\n9.1 Swing和模型-视图-控制器设计模式\n9.1.1 设计模式\n9.1.2 模型-视图-控制器模式\n9.1.3 Swing按钮的模型-视图-控制器分析\n9.2 布局管理概述\n9.2.1 边框布局\n9.2.2 网格布局\n9.3 文本输入\n9.3.1 文本域\n9.3.2 标签和标签组件\n9.3.3 密码域\n9.3.4 文本区\n9.3.5 滚动窗格\n9.4 选择组件\n9.4.1 复选框\n9.4.2 单选按钮\n9.4.3 边框\n9.4.4 组合框\n9.4.5 滑动条\n9.5 菜单\n9.5.1 菜单创建\n9.5.2 菜单项中的图标\n9.5.3 复选框和单选按钮菜单项\n9.5.4 弹出菜单\n9.5.5 快捷键和加速器\n9.5.6 启用和禁用菜单项\n9.5.7 工具栏\n9.5.8 工具提示\n9.6 复杂的布局管理\n9.6.1 网格组布局\n9.6.2 组布局\n9.6.3 不使用布局管理器\n9.6.4 定制布局管理器\n9.6.5 遍历顺序\n9.7 对话框\n9.7.1 选项对话框\n9.7.2 创建对话框\n9.7.3 数据交换\n9.7.4 文件对话框\n9.7.5 颜色选择器\n第10章 部署应用程序和applet\n10.1 JAR文件\n10.1.1 清单文件\n10.1.2 可运行JAR文件\n10.1.3 资源\n10.1.4 密封\n10.2 Java Web Start\n10.2.1 沙箱\n10.2.2 签名代码\n10.2.3 JNLP API\n10.3 applet\n10.3.1 一个简单的applet\n10.3.2 applet的HTML标记和属性\n10.3.3 object标记\n10.3.4 使用参数向applet传递信息\n10.3.5 访问图像和音频文件\n10.3.6 applet上下文\n10.4 应用程序首选项存储\n10.4.1 属性映射\n10.4.2 Preferences API\n第11章 异常、断言、日志和调试\n11.1 处理错误\n11.1.1 异常分类\n11.1.2 声明已检查异常\n11.1.3 如何抛出异常\n11.1.4 创建异常类\n11.2 捕获异常\n11.2.1 捕获多个异常\n11.2.2 再次抛出异常与异常链\n11.2.3 finally子句\n11.2.4 带资源的try语句\n11.2.5 分析堆栈跟踪元素\n11.3 使用异常机制的技巧\n11.4 使用断言\n11.4.1 启用和禁用断言\n11.4.2 使用断言完成参数检查\n11.4.3 为文档假设使用断言\n11.5 记录日志\n11.5.1 基本日志\n11.5.2 高级日志\n11.5.3 修改日志管理器配置\n11.5.4 本地化\n11.5.5 处理器\n11.5.6 过滤器\n11.5.7 格式化器\n11.5.8 日志记录说明\n11.6 调试技巧\n11.7 GUI程序排错技巧\n11.8 使用调试器\n第12章 泛型程序设计\n12.1 为什么要使用泛型程序设计\n12.2 定义简单泛型类\n12.3 泛型方法\n12.4 类型变量的限定\n12.5 泛型代码和虚拟机\n12.5.1 翻译泛型表达式\n12.5.2 翻译泛型方法\n12.5.3 调用遗留代码\n12.6 约束与局限性\n12.6.1 不能用基本类型实例化类型参数\n12.6.2 运行时类型查询只适用于原始类型\n12.6.3 不能创建参数化类型的数组\n12.6.4 Varargs警告\n12.6.5 不能实例化类型变量\n12.6.6 泛型类的静态上下文中类型变量无效\n12.6.7 不能抛出或捕获泛型类的实例\n12.6.8 注意擦除后的冲突\n12.7 泛型类型的继承规则\n12.8 通配符类型\n12.8.1 通配符的超类型限定\n12.8.2 无限定通配符\n12.8.3 通配符捕获\n12.9 反射和泛型\n12.9.1 使用Class参数进行类型匹配\n12.9.2 虚拟机中的泛型类型信息\n第13章 集合\n13.1 集合接口\n13.1.1 将集合的接口与实现分离\n13.1.2 Java类库中的集合接口和迭代器接口\n13.2 具体的集合\n13.2.1 链表\n13.2.2 数组列表\n13.2.3 散列集\n13.2.4 树集\n13.2.5 对象的比较\n13.2.6 队列与双端队列\n13.2.7 优先级队列\n13.2.8 映射表\n13.2.9 专用集与映射表类\n13.3 集合框架\n13.3.1 视图与包装器\n13.3.2 批操作\n13.3.3 集合与数组之间的转换\n13.4 算法\n13.4.1 排序与混排\n13.4.2 二分查找\n13.4.3 简单算法\n13.4.4 编写自己的算法\n13.5 遗留的集合\n13.5.1 Hashtable类\n13.5.2 枚举\n13.5.3 属性映射表\n13.5.4 栈\n13.5.5 位集\n第14章 多线程\n14.1 什么是线程\n14.2 中断线程\n14.3 线程状态\n14.3.1 新创建线程\n14.3.2 可运行线程\n14.3.3 被阻塞线程和等待线程\n14.3.4 被终止的线程\n14.4 线程属性\n14.4.1 线程优先级\n14.4.2 守护线程\n14.4.3 未捕获异常处理器\n14.5 同步\n14.5.1 竞争条件的一个例子\n14.5.2 竞争条件详解\n14.5.3 锁对象\n14.5.4 条件对象\n14.5.5 synchronized关键字\n14.5.6 同步阻塞\n14.5.7 监视器概念\n14.5.8 Volatile域\n14.5.9 final变量\n14.5.10 原子性\n14.5.11 死锁\n14.5.12 线程局部变量\n14.5.13 锁测试与超时\n14.5.14 读/写锁\n14.5.15 为什么弃用stop和suspend方法\n14.6 阻塞队列\n14.7 线程安全的集合\n14.7.1 高效的映射表、集合和队列\n14.7.2 写数组的拷贝\n14.7.3 较早的线程安全集合\n14.8 Callable与Future\n14.9 执行器\n14.9.1 线程池\n14.9.2 预定执行\n14.9.3 控制任务组\n14.9.4 Fork-Join框架\n14.10 同步器\n14.10.1 信号量\n14.10.2 倒计时门栓\n14.10.3 障栅\n14.10.4 交换器\n14.10.5 同步队列\n14.11 线程与Swing\n14.11.1 运行耗时的任务\n14.11.2 使用Swing工作线程\n14.11.3 单一线程规则\n附录　Java关键字")])])}),[],!1,null,null,null);a.default=r.exports}}]);